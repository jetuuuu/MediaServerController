// Code generated by protoc-gen-go.
// source: mediaserver.proto
// DO NOT EDIT!

/*
Package mediaserver is a generated protocol buffer package.

It is generated from these files:
	mediaserver.proto

It has these top-level messages:
	Attribute
	Codec
	Media
	Sdp
	MediaServerUDPAddr
	MediaServerObject
	MediaServerReceiver
	MediaServerParam
	MediaServerReq
	MediaServerRep
	MediaServerMsg
	MediaServerFrontendMsg
*/
package mediaserver

import proto "code.google.com/p/goprotobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type Media_MediaType int32

const (
	Media_Audio Media_MediaType = 1
	Media_Video Media_MediaType = 2
)

var Media_MediaType_name = map[int32]string{
	1: "Audio",
	2: "Video",
}
var Media_MediaType_value = map[string]int32{
	"Audio": 1,
	"Video": 2,
}

func (x Media_MediaType) Enum() *Media_MediaType {
	p := new(Media_MediaType)
	*p = x
	return p
}
func (x Media_MediaType) String() string {
	return proto.EnumName(Media_MediaType_name, int32(x))
}
func (x *Media_MediaType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Media_MediaType_value, data, "Media_MediaType")
	if err != nil {
		return err
	}
	*x = Media_MediaType(value)
	return nil
}

type Media_MediaProtocol int32

const (
	Media_RTP_AVP   Media_MediaProtocol = 1
	Media_RTP_SAVP  Media_MediaProtocol = 2
	Media_RTP_AVPF  Media_MediaProtocol = 3
	Media_RTP_SAVPF Media_MediaProtocol = 4
)

var Media_MediaProtocol_name = map[int32]string{
	1: "RTP_AVP",
	2: "RTP_SAVP",
	3: "RTP_AVPF",
	4: "RTP_SAVPF",
}
var Media_MediaProtocol_value = map[string]int32{
	"RTP_AVP":   1,
	"RTP_SAVP":  2,
	"RTP_AVPF":  3,
	"RTP_SAVPF": 4,
}

func (x Media_MediaProtocol) Enum() *Media_MediaProtocol {
	p := new(Media_MediaProtocol)
	*p = x
	return p
}
func (x Media_MediaProtocol) String() string {
	return proto.EnumName(Media_MediaProtocol_name, int32(x))
}
func (x *Media_MediaProtocol) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Media_MediaProtocol_value, data, "Media_MediaProtocol")
	if err != nil {
		return err
	}
	*x = Media_MediaProtocol(value)
	return nil
}

type Media_MediaDirection int32

const (
	Media_Sendrecv Media_MediaDirection = 1
	Media_Recvonly Media_MediaDirection = 2
	Media_Sendonly Media_MediaDirection = 3
	Media_Inactive Media_MediaDirection = 4
)

var Media_MediaDirection_name = map[int32]string{
	1: "Sendrecv",
	2: "Recvonly",
	3: "Sendonly",
	4: "Inactive",
}
var Media_MediaDirection_value = map[string]int32{
	"Sendrecv": 1,
	"Recvonly": 2,
	"Sendonly": 3,
	"Inactive": 4,
}

func (x Media_MediaDirection) Enum() *Media_MediaDirection {
	p := new(Media_MediaDirection)
	*p = x
	return p
}
func (x Media_MediaDirection) String() string {
	return proto.EnumName(Media_MediaDirection_name, int32(x))
}
func (x *Media_MediaDirection) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Media_MediaDirection_value, data, "Media_MediaDirection")
	if err != nil {
		return err
	}
	*x = Media_MediaDirection(value)
	return nil
}

type MediaServerReq_CommandType int32

const (
	MediaServerReq_CreateEndPoint              MediaServerReq_CommandType = 1
	MediaServerReq_GetEndPointMedia            MediaServerReq_CommandType = 2
	MediaServerReq_UpdateEndPointMedia         MediaServerReq_CommandType = 3
	MediaServerReq_SendDTMF                    MediaServerReq_CommandType = 4
	MediaServerReq_SetReceiver                 MediaServerReq_CommandType = 5
	MediaServerReq_ResetReceiver               MediaServerReq_CommandType = 6
	MediaServerReq_DestroyObject               MediaServerReq_CommandType = 7
	MediaServerReq_CreatePlayer                MediaServerReq_CommandType = 8
	MediaServerReq_CreateRecorder              MediaServerReq_CommandType = 9
	MediaServerReq_CreateTranscoder            MediaServerReq_CommandType = 10
	MediaServerReq_CreateSRTP                  MediaServerReq_CommandType = 11
	MediaServerReq_CreateMixer                 MediaServerReq_CommandType = 12
	MediaServerReq_AttachToMixer               MediaServerReq_CommandType = 13
	MediaServerReq_DetachFromMixer             MediaServerReq_CommandType = 14
	MediaServerReq_CreateSimpleMixer           MediaServerReq_CommandType = 15
	MediaServerReq_AttachStreamToSimpleMixer   MediaServerReq_CommandType = 16
	MediaServerReq_DetachStreamFromSimpleMixer MediaServerReq_CommandType = 17
	MediaServerReq_CreateEmptyObject           MediaServerReq_CommandType = 18
	MediaServerReq_CreateVideoMix              MediaServerReq_CommandType = 19
	MediaServerReq_AttachEndPoint              MediaServerReq_CommandType = 20
	MediaServerReq_DettachEndPoint             MediaServerReq_CommandType = 21
)

var MediaServerReq_CommandType_name = map[int32]string{
	1:  "CreateEndPoint",
	2:  "GetEndPointMedia",
	3:  "UpdateEndPointMedia",
	4:  "SendDTMF",
	5:  "SetReceiver",
	6:  "ResetReceiver",
	7:  "DestroyObject",
	8:  "CreatePlayer",
	9:  "CreateRecorder",
	10: "CreateTranscoder",
	11: "CreateSRTP",
	12: "CreateMixer",
	13: "AttachToMixer",
	14: "DetachFromMixer",
	15: "CreateSimpleMixer",
	16: "AttachStreamToSimpleMixer",
	17: "DetachStreamFromSimpleMixer",
	18: "CreateEmptyObject",
	19: "CreateVideoMix",
	20: "AttachEndPoint",
	21: "DettachEndPoint",
}
var MediaServerReq_CommandType_value = map[string]int32{
	"CreateEndPoint":              1,
	"GetEndPointMedia":            2,
	"UpdateEndPointMedia":         3,
	"SendDTMF":                    4,
	"SetReceiver":                 5,
	"ResetReceiver":               6,
	"DestroyObject":               7,
	"CreatePlayer":                8,
	"CreateRecorder":              9,
	"CreateTranscoder":            10,
	"CreateSRTP":                  11,
	"CreateMixer":                 12,
	"AttachToMixer":               13,
	"DetachFromMixer":             14,
	"CreateSimpleMixer":           15,
	"AttachStreamToSimpleMixer":   16,
	"DetachStreamFromSimpleMixer": 17,
	"CreateEmptyObject":           18,
	"CreateVideoMix":              19,
	"AttachEndPoint":              20,
	"DettachEndPoint":             21,
}

func (x MediaServerReq_CommandType) Enum() *MediaServerReq_CommandType {
	p := new(MediaServerReq_CommandType)
	*p = x
	return p
}
func (x MediaServerReq_CommandType) String() string {
	return proto.EnumName(MediaServerReq_CommandType_name, int32(x))
}
func (x *MediaServerReq_CommandType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MediaServerReq_CommandType_value, data, "MediaServerReq_CommandType")
	if err != nil {
		return err
	}
	*x = MediaServerReq_CommandType(value)
	return nil
}

type MediaServerRep_Result int32

const (
	MediaServerRep_OK                  MediaServerRep_Result = 200
	MediaServerRep_NotFound            MediaServerRep_Result = 404
	MediaServerRep_InternalServerError MediaServerRep_Result = 500
	MediaServerRep_NotImplemented      MediaServerRep_Result = 501
)

var MediaServerRep_Result_name = map[int32]string{
	200: "OK",
	404: "NotFound",
	500: "InternalServerError",
	501: "NotImplemented",
}
var MediaServerRep_Result_value = map[string]int32{
	"OK":                  200,
	"NotFound":            404,
	"InternalServerError": 500,
	"NotImplemented":      501,
}

func (x MediaServerRep_Result) Enum() *MediaServerRep_Result {
	p := new(MediaServerRep_Result)
	*p = x
	return p
}
func (x MediaServerRep_Result) String() string {
	return proto.EnumName(MediaServerRep_Result_name, int32(x))
}
func (x *MediaServerRep_Result) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MediaServerRep_Result_value, data, "MediaServerRep_Result")
	if err != nil {
		return err
	}
	*x = MediaServerRep_Result(value)
	return nil
}

type Attribute struct {
	Name             *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Value            *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Attribute) Reset()         { *m = Attribute{} }
func (m *Attribute) String() string { return proto.CompactTextString(m) }
func (*Attribute) ProtoMessage()    {}

func (m *Attribute) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Attribute) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type Codec struct {
	Id               *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Name             *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	Format           *string `protobuf:"bytes,3,opt,name=format" json:"format,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Codec) Reset()         { *m = Codec{} }
func (m *Codec) String() string { return proto.CompactTextString(m) }
func (*Codec) ProtoMessage()    {}

func (m *Codec) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Codec) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Codec) GetFormat() string {
	if m != nil && m.Format != nil {
		return *m.Format
	}
	return ""
}

type Media struct {
	Media            *Media_MediaType      `protobuf:"varint,1,req,name=media,enum=mediaserver.Media_MediaType,def=1" json:"media,omitempty"`
	Ip               *string               `protobuf:"bytes,2,req,name=ip" json:"ip,omitempty"`
	Protocol         *Media_MediaProtocol  `protobuf:"varint,3,req,name=protocol,enum=mediaserver.Media_MediaProtocol" json:"protocol,omitempty"`
	Direction        *Media_MediaDirection `protobuf:"varint,4,opt,name=direction,enum=mediaserver.Media_MediaDirection,def=1" json:"direction,omitempty"`
	AttrList         []*Attribute          `protobuf:"bytes,5,rep,name=attrList" json:"attrList,omitempty"`
	CodecList        []*Codec              `protobuf:"bytes,6,rep,name=codecList" json:"codecList,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *Media) Reset()         { *m = Media{} }
func (m *Media) String() string { return proto.CompactTextString(m) }
func (*Media) ProtoMessage()    {}

const Default_Media_Media Media_MediaType = Media_Audio
const Default_Media_Direction Media_MediaDirection = Media_Sendrecv

func (m *Media) GetMedia() Media_MediaType {
	if m != nil && m.Media != nil {
		return *m.Media
	}
	return Default_Media_Media
}

func (m *Media) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *Media) GetProtocol() Media_MediaProtocol {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return Media_RTP_AVP
}

func (m *Media) GetDirection() Media_MediaDirection {
	if m != nil && m.Direction != nil {
		return *m.Direction
	}
	return Default_Media_Direction
}

func (m *Media) GetAttrList() []*Attribute {
	if m != nil {
		return m.AttrList
	}
	return nil
}

func (m *Media) GetCodecList() []*Codec {
	if m != nil {
		return m.CodecList
	}
	return nil
}

type Sdp struct {
	SessionID        *string      `protobuf:"bytes,1,opt,name=sessionID" json:"sessionID,omitempty"`
	SessionVersion   *string      `protobuf:"bytes,2,opt,name=sessionVersion" json:"sessionVersion,omitempty"`
	Ip               *string      `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
	OrigIP           *string      `protobuf:"bytes,4,opt,name=origIP" json:"origIP,omitempty"`
	AttrList         []*Attribute `protobuf:"bytes,5,rep,name=attrList" json:"attrList,omitempty"`
	MediaList        []*Media     `protobuf:"bytes,6,rep,name=mediaList" json:"mediaList,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Sdp) Reset()         { *m = Sdp{} }
func (m *Sdp) String() string { return proto.CompactTextString(m) }
func (*Sdp) ProtoMessage()    {}

func (m *Sdp) GetSessionID() string {
	if m != nil && m.SessionID != nil {
		return *m.SessionID
	}
	return ""
}

func (m *Sdp) GetSessionVersion() string {
	if m != nil && m.SessionVersion != nil {
		return *m.SessionVersion
	}
	return ""
}

func (m *Sdp) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *Sdp) GetOrigIP() string {
	if m != nil && m.OrigIP != nil {
		return *m.OrigIP
	}
	return ""
}

func (m *Sdp) GetAttrList() []*Attribute {
	if m != nil {
		return m.AttrList
	}
	return nil
}

func (m *Sdp) GetMediaList() []*Media {
	if m != nil {
		return m.MediaList
	}
	return nil
}

type MediaServerUDPAddr struct {
	Ip               *uint32 `protobuf:"fixed32,1,req,name=ip" json:"ip,omitempty"`
	Port             *uint32 `protobuf:"varint,2,req,name=port" json:"port,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MediaServerUDPAddr) Reset()         { *m = MediaServerUDPAddr{} }
func (m *MediaServerUDPAddr) String() string { return proto.CompactTextString(m) }
func (*MediaServerUDPAddr) ProtoMessage()    {}

func (m *MediaServerUDPAddr) GetIp() uint32 {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return 0
}

func (m *MediaServerUDPAddr) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

type MediaServerObject struct {
	Mg               *uint32 `protobuf:"varint,1,req,name=mg" json:"mg,omitempty"`
	Id               *uint32 `protobuf:"varint,2,req,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MediaServerObject) Reset()         { *m = MediaServerObject{} }
func (m *MediaServerObject) String() string { return proto.CompactTextString(m) }
func (*MediaServerObject) ProtoMessage()    {}

func (m *MediaServerObject) GetMg() uint32 {
	if m != nil && m.Mg != nil {
		return *m.Mg
	}
	return 0
}

func (m *MediaServerObject) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type MediaServerReceiver struct {
	Obj              *MediaServerObject  `protobuf:"bytes,1,req,name=obj" json:"obj,omitempty"`
	Addr             *MediaServerUDPAddr `protobuf:"bytes,2,req,name=addr" json:"addr,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *MediaServerReceiver) Reset()         { *m = MediaServerReceiver{} }
func (m *MediaServerReceiver) String() string { return proto.CompactTextString(m) }
func (*MediaServerReceiver) ProtoMessage()    {}

func (m *MediaServerReceiver) GetObj() *MediaServerObject {
	if m != nil {
		return m.Obj
	}
	return nil
}

func (m *MediaServerReceiver) GetAddr() *MediaServerUDPAddr {
	if m != nil {
		return m.Addr
	}
	return nil
}

type MediaServerParam struct {
	Obj              *MediaServerObject   `protobuf:"bytes,1,opt,name=obj" json:"obj,omitempty"`
	Recv             *MediaServerReceiver `protobuf:"bytes,2,opt,name=recv" json:"recv,omitempty"`
	Str              *string              `protobuf:"bytes,3,opt,name=str" json:"str,omitempty"`
	Codec            *Codec               `protobuf:"bytes,4,opt,name=codec" json:"codec,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *MediaServerParam) Reset()         { *m = MediaServerParam{} }
func (m *MediaServerParam) String() string { return proto.CompactTextString(m) }
func (*MediaServerParam) ProtoMessage()    {}

func (m *MediaServerParam) GetObj() *MediaServerObject {
	if m != nil {
		return m.Obj
	}
	return nil
}

func (m *MediaServerParam) GetRecv() *MediaServerReceiver {
	if m != nil {
		return m.Recv
	}
	return nil
}

func (m *MediaServerParam) GetStr() string {
	if m != nil && m.Str != nil {
		return *m.Str
	}
	return ""
}

func (m *MediaServerParam) GetCodec() *Codec {
	if m != nil {
		return m.Codec
	}
	return nil
}

type MediaServerReq struct {
	Command          *MediaServerReq_CommandType `protobuf:"varint,1,req,name=command,enum=mediaserver.MediaServerReq_CommandType" json:"command,omitempty"`
	Obj              *MediaServerObject          `protobuf:"bytes,2,opt,name=obj" json:"obj,omitempty"`
	Media            *Media                      `protobuf:"bytes,3,opt,name=media" json:"media,omitempty"`
	Params           []*MediaServerParam         `protobuf:"bytes,4,rep,name=params" json:"params,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *MediaServerReq) Reset()         { *m = MediaServerReq{} }
func (m *MediaServerReq) String() string { return proto.CompactTextString(m) }
func (*MediaServerReq) ProtoMessage()    {}

func (m *MediaServerReq) GetCommand() MediaServerReq_CommandType {
	if m != nil && m.Command != nil {
		return *m.Command
	}
	return MediaServerReq_CreateEndPoint
}

func (m *MediaServerReq) GetObj() *MediaServerObject {
	if m != nil {
		return m.Obj
	}
	return nil
}

func (m *MediaServerReq) GetMedia() *Media {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *MediaServerReq) GetParams() []*MediaServerParam {
	if m != nil {
		return m.Params
	}
	return nil
}

type MediaServerRep struct {
	Res              *MediaServerRep_Result `protobuf:"varint,1,req,name=res,enum=mediaserver.MediaServerRep_Result" json:"res,omitempty"`
	Obj              *MediaServerObject     `protobuf:"bytes,2,opt,name=obj" json:"obj,omitempty"`
	Media            *Media                 `protobuf:"bytes,3,opt,name=media" json:"media,omitempty"`
	Description      *string                `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *MediaServerRep) Reset()         { *m = MediaServerRep{} }
func (m *MediaServerRep) String() string { return proto.CompactTextString(m) }
func (*MediaServerRep) ProtoMessage()    {}

func (m *MediaServerRep) GetRes() MediaServerRep_Result {
	if m != nil && m.Res != nil {
		return *m.Res
	}
	return MediaServerRep_OK
}

func (m *MediaServerRep) GetObj() *MediaServerObject {
	if m != nil {
		return m.Obj
	}
	return nil
}

func (m *MediaServerRep) GetMedia() *Media {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *MediaServerRep) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

type MediaServerMsg struct {
	Mg               *uint32            `protobuf:"varint,1,opt,name=mg" json:"mg,omitempty"`
	Ip               *uint32            `protobuf:"fixed32,2,opt,name=ip" json:"ip,omitempty"`
	TcpClusterPort   *uint32            `protobuf:"varint,3,opt,name=tcpClusterPort" json:"tcpClusterPort,omitempty"`
	UdpClusterPort   *uint32            `protobuf:"varint,4,opt,name=udpClusterPort" json:"udpClusterPort,omitempty"`
	NumObjects       *uint32            `protobuf:"varint,5,opt,name=numObjects" json:"numObjects,omitempty"`
	CpuUsage         *uint32            `protobuf:"varint,6,opt,name=cpuUsage" json:"cpuUsage,omitempty"`
	Obj              *MediaServerObject `protobuf:"bytes,7,opt,name=obj" json:"obj,omitempty"`
	Dtmf             *uint32            `protobuf:"varint,8,opt,name=dtmf" json:"dtmf,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *MediaServerMsg) Reset()         { *m = MediaServerMsg{} }
func (m *MediaServerMsg) String() string { return proto.CompactTextString(m) }
func (*MediaServerMsg) ProtoMessage()    {}

func (m *MediaServerMsg) GetMg() uint32 {
	if m != nil && m.Mg != nil {
		return *m.Mg
	}
	return 0
}

func (m *MediaServerMsg) GetIp() uint32 {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return 0
}

func (m *MediaServerMsg) GetTcpClusterPort() uint32 {
	if m != nil && m.TcpClusterPort != nil {
		return *m.TcpClusterPort
	}
	return 0
}

func (m *MediaServerMsg) GetUdpClusterPort() uint32 {
	if m != nil && m.UdpClusterPort != nil {
		return *m.UdpClusterPort
	}
	return 0
}

func (m *MediaServerMsg) GetNumObjects() uint32 {
	if m != nil && m.NumObjects != nil {
		return *m.NumObjects
	}
	return 0
}

func (m *MediaServerMsg) GetCpuUsage() uint32 {
	if m != nil && m.CpuUsage != nil {
		return *m.CpuUsage
	}
	return 0
}

func (m *MediaServerMsg) GetObj() *MediaServerObject {
	if m != nil {
		return m.Obj
	}
	return nil
}

func (m *MediaServerMsg) GetDtmf() uint32 {
	if m != nil && m.Dtmf != nil {
		return *m.Dtmf
	}
	return 0
}

type MediaServerFrontendMsg struct {
	Receiver         *MediaServerObject `protobuf:"bytes,1,opt,name=receiver" json:"receiver,omitempty"`
	Stream           *MediaServerObject `protobuf:"bytes,2,opt,name=stream" json:"stream,omitempty"`
	Data             []byte             `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *MediaServerFrontendMsg) Reset()         { *m = MediaServerFrontendMsg{} }
func (m *MediaServerFrontendMsg) String() string { return proto.CompactTextString(m) }
func (*MediaServerFrontendMsg) ProtoMessage()    {}

func (m *MediaServerFrontendMsg) GetReceiver() *MediaServerObject {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *MediaServerFrontendMsg) GetStream() *MediaServerObject {
	if m != nil {
		return m.Stream
	}
	return nil
}

func (m *MediaServerFrontendMsg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("mediaserver.Media_MediaType", Media_MediaType_name, Media_MediaType_value)
	proto.RegisterEnum("mediaserver.Media_MediaProtocol", Media_MediaProtocol_name, Media_MediaProtocol_value)
	proto.RegisterEnum("mediaserver.Media_MediaDirection", Media_MediaDirection_name, Media_MediaDirection_value)
	proto.RegisterEnum("mediaserver.MediaServerReq_CommandType", MediaServerReq_CommandType_name, MediaServerReq_CommandType_value)
	proto.RegisterEnum("mediaserver.MediaServerRep_Result", MediaServerRep_Result_name, MediaServerRep_Result_value)
}
